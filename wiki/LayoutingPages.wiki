#summary How to layout pages [UNDER CONSTRUCTION]
Last Update: April 19th, 2010

*This page is currently under construction and thus not finished.*

   ----
   Note: this wiki page covers version 1.1.0.
   ----

*Assumed readings*

It is recommended to read the following articles before starting with the current wiki article:

   * [GettingStarted Getting started]
   * [BasicConcepts Basic Concepts]

*Table of content*
<wiki:toc max_depth="2" />

=Creating the basic page structure=
Layouting pages is really easy and straight forward in floatz. The following wiki article describes how to set up a basic page layout, customize the page elements, change the layout mode of the page and explains more advanced techniques to mix different layout modes.

==Defining the page container==
First of all we need a page container. The page container must be the first element within the `BODY` of the HTML page. As you can see in the code example, the page container is a `DIV` element with the CSS id `flz_page`. Using an id assures, that the page container can occur only once on the HTML page. While the `BODY` element is used as background for the viewport of the browser, the page defines the visual edges of our page. As we will see later in this article, the width of the page container is influenced by the layout mode that is used. In this article we start with a fixed layout.

*CSS Code*
{{{
/* Loads floatz CSS framework */
@import url(floatz-1.1.0/floatz.fixed.css);

/* Project specific styles */
}}}

*HTML code*
{{{
<body>
   <!-- page -->
   <div id="flz_page">
      page
   </div>
</body>
}}}
*Example 1 - Defining the page container* ([http://design.humml.eu/toolbox/floatz/samples/LayoutingPages/LayoutingPages_01.html Live Demo])

==Defining the basic page elements==
Next we want to create a classic page layout structure with a header, a horizontal menu, a vertical submenu on the left, a content container on the right and a footer. Therefor we add a box for each of the pageÂ´s layout elements within the page container. A box is a `DIV` element with an associated CSS class named `flz_box`.

{{{
<!-- page -->
<div id="flz_page">
   <!-- header -->
   <div class="flz_box">
      Header
   </div>
   <!-- menu -->
   <div class="flz_box">
      Menu
   </div>
   <!-- submenu -->
   <div class="flz_box">
      Submenu
   </div>
   <!-- content -->
   <div class="flz_box">
      Content
   </div>
   <!-- footer -->
   <div class="flz_box">
      Footer
   </div>
</div>
}}}
*Example 2 - Defining the basic page elements* ([http://design.humml.eu/toolbox/floatz/samples/LayoutingPages/LayoutingPages_02.html Live Demo])

When you run the sample code and look at the result, you will see that each of the boxes is shown in a separate row. The reason is that a box element has a width of 100% by default.

To change that we add layouters to the submenu and the content container, because they should appear side by side. We use a left oriented layouter with a width of 20% (`flz_l20`) for the submenu and a right oriented layouter with a width of 80% (`flz_r80`) for the content container. To fix a bug in Internet Explorer, it is also necessary to add a right oriented layouter to the last box element in a sequence of boxes on the same level (see [BrowserHacks Browser Hacks] for more details). In our case the footer is the last box in the sequence and thus must be marked with `flz_r100`.

{{{
<!-- page -->
<div id="flz_page">
   <!-- header -->
   <div class="flz_box">
      Header
   </div>
   <!-- menu -->
   <div class="flz_box">
      Menu
   </div>
   <!-- submenu -->
   <div class="flz_box flz_l20">
      Submenu
   </div>
   <!-- content -->
   <div class="flz_box flz_r80">
      Content
   </div>
   <!-- footer -->
   <div class="flz_box flz_r100">
      Footer
   </div>
</div>
}}}
*Example 3 - Adding layouters* ([http://design.humml.eu/toolbox/floatz/samples/LayoutingPages/LayoutingPages_03.html Live Demo])

==Customizing the page elements==

==Changing the layout mode==

==Adding min-width containers==

=Advanced topics=

==Mixing layout modes==

=Summary=
What you have learned in this wiki article:

   * ...

====Further readings====
The following wiki articles contain further information about how to use the basic concepts in practice:

   * [LayoutingContent Layouting Content]
   * [LayoutingForms Layouting Forms]