#summary Describes how to layout navigation as menus, toolbars, breadcrumbs, tabboxes  and skiplinks [UNDER CONSTRUCTION]
Last Update: June 05, 2010

*This page is currently under construction and thus not finished.*

   ----
   Note: this wiki page covers version 1.1.0.
   ----

*Presumed readings*

It is recommended to read the following articles before starting with the current wiki article*

   * [BasicConcepts Basic Concepts]
   * [LayoutingPages Layouting Pages]

*Table of content*

<wiki:toc max_depth="2" />

=Introduction=
Navigation is one of the most important concepts in web application. The appropriate means to that purpose are hyperlinks. But in practice the requirements on the look & feel of our navigation goes far beyond hyplinks: we need nice looking menus, tabboxes, toolbars with hover effects, highlighting and so on. The following wiki article shows a way how you can meet most of those requirements, without Javascript and multi-nested HTML tables - only with CSS and simple list elements. And if you need more, you can add additional effects to that light weight navigation solution with javascript based effects libraries like jQuery.

=Layouting list navigations=
==Defining a list navigation==
Let´s start with the most basic navigation solution that is available in floatz: list navigation. The following code is based on example 5 of [LayoutingPages Layouting pages]. Because we want to focus on navigation only, first of all we delete all content from that sample page thats within the content box. The content box should look like this:

{{{
...
<!-- content -->
<div class="flz_box flz_r80 content">
   Content
</div>
...
}}}

Now we add a list of hyperlinks to the menu container. The list starts with an `UL` tag, followed by `LI` tags that contain hyperlinks as `A` tags for the navigation. Usually we will add URLs to the hyperlinks, but in our example we use "#" as placeholder.

{{{
...
<!-- menu -->
<div class="flz_box menu">
   <ul>
      <li><a href="#">Menu 1</a></li>
      <li><a href="#">Menu 2</a></li>
      <li><a href="#">Menu 3</a></li>
      <li><a href="#">Menu 4</a></li>
   </ul>
</div>
...
}}}

*Example 1 - Defining a list of hyperlinks* ([http://design.humml.eu/toolbox/floatz/samples/LayoutingNavigation/LayoutingNavigation_01.html Live Demo])

http://design.humml.eu/toolbox/floatz/samples/LayoutingNavigation/images/Layouting_Navigation_01.jpg

The result shows a simple list that isn't completely visible, because the menu container is not high enough. To transform the list into a list navigation we only have to add the CSS class `flz_listnav` to the class attribute of the `UL` tag.

{{{
<!-- menu -->
...
<div class="flz_box menu">
   <ul class="flz_listnav">
      <li><a href="#">Menu 1</a></li>
      <li><a href="#">Menu 2</a></li>
      <li><a href="#">Menu 3</a></li>
      <li><a href="#">Menu 4</a></li>
   </ul>
</div>
...
}}}

*Example 1b - Transforming the list to a list navigation* ([http://design.humml.eu/toolbox/floatz/samples/LayoutingNavigation/LayoutingNavigation_01b.html Live Demo])

http://design.humml.eu/toolbox/floatz/samples/LayoutingNavigation/images/Layouting_Navigation_01b.jpg

Now the result is much better. The navigation elements are listed side by side. To make the navigation perfect, we add separators between the navigation items as well as tooltips that are shown when the mouse cursor moves over the items. Last but not least, we want to highlight the current navigation item. To get this, we add `flz_selected` to the class attribute of the desired navigation item´s `LI` tag.

{{{
...
<div class="flz_box menu">
   <ul class="flz_listnav">
      <li class="flz_selected"><a href="#" title="Goto Menu 1">Menu 1</a> |</li>
      <li><a href="#" title="Goto Menu 2">Menu 2</a> |</li>
      <li><a href="#" title="Goto Menu 3">Menu 3</a> |</li>
      <li><a href="#" title="Goto Menu 4">Menu 4</a></li>
   </ul>
</div>
...
}}}

*Example 1c - Finishing the list navigation example* ([http://design.humml.eu/toolbox/floatz/samples/LayoutingNavigation/LayoutingNavigation_01c.html Live Demo])

http://design.humml.eu/toolbox/floatz/samples/LayoutingNavigation/images/Layouting_Navigation_01c.jpg

===Changing the alignment of the list navigation===
To change the alignment of the list navigation, we simply have to customize the list navigation in the context of the menu container within our CSS file. In the following example the alignment is changed from left (default) to center.

*CSS code:*

{{{
...
.menu .flz_listnav {
   text-align: center;
}
...
}}}
*Example 1d - Customizing the list navigation to centered alignment* ([http://design.humml.eu/toolbox/floatz/samples/LayoutingNavigation/LayoutingNavigation_01d.html Live Demo])

http://design.humml.eu/toolbox/floatz/samples/LayoutingNavigation/images/Layouting_Navigation_01d.jpg

If the alignment should be right instead, we change the CSS file again:

*CSS code*

{{{
...
.menu .flz_listnav {
   text-align: right;
...
}
}}}
*Example 1e - Customizing the list navigation to right alignment* ([http://design.humml.eu/toolbox/floatz/samples/LayoutingNavigation/LayoutingNavigation_01e.html Live Demo])

http://design.humml.eu/toolbox/floatz/samples/LayoutingNavigation/images/Layouting_Navigation_01e.jpg

==Defining a top navigation==
Next we add a navigation element to our example that is based on the list navigation. Its called top navigation and is normally used for secondary navigation that should occur on every page of the web site, but should not be part of the main navigation. Therefor we add a list navigation to the header container (as described in the previous section). Then we add `flz_topnav` after `flz_listnav` to the `class` attribute of the surrounding `UL` element. 

   ----
   Note: It is important that you first add `flz_listnav` to the class attribute and then `flz_topnav`. The top navigation class does not work on its on and only extends the behaviour of the list navigaton class.
   ----

{{{
...
<!-- header -->
<div class="flz_box header">
   <ul class="flz_listnav flz_topnav">
      <li class="flz_selected"><a href="#" title="Goto Homepage">Home</a> |</li>
      <li><a href="#" title="Goto Sitemap">Sitemap</a> |</li>
      <li><a href="#" title="Goto Contact">Contact</a></li>
   </ul>
   Header
</div>
...
}}}
*Example 2 - Adding a top navigation to the header* ([http://design.humml.eu/toolbox/floatz/samples/LayoutingNavigation/LayoutingNavigation_02.html Live Demo])

http://design.humml.eu/toolbox/floatz/samples/LayoutingNavigation/images/Layouting_Navigation_02.jpg

As you can see when you run the example, the top navigation container floats to the right corner of the header container. The reason for this is, because the page container is a relative positioned element and the `flz_topnav` annotation makes the list navigation to an absolute positioned element. See [BasicConcepts basic concepts] for a description about using relative and absolute positioned elements.

==Defining a breadcrumb==
Breadcrumbs are one of the most useful navigation concepts in web sites and applications. They shows users where they currently are in the context of the sitemap and give them the possibility to navigate back to a specific page in this path. floatz also provides a CSS class for breadcrumb support. 

To see how to get a breadcrumb, first we add a simple list navigation to the content container, then we add the `flz_breadcrumb` annotation after `flz_listnav` to the `UL` element. To extend the example, we also add some content to the content container.

{{{
<!-- content -->
...
<div class="flz_box flz_r80 content">
   <ul class="flz_listnav flz_breadcrumb">
      <li><a href="#" title="Goto Homepage">Home</a> &gt;</li>
      <li class="flz_selected"><a href="#" title="Goto Menu 1">Menu 1</a></li>
   </ul>
   <div class="flz_spacer">
      <h1>Content</h1>
      <p>
         Lorem ipsum dolor sit amet, consetetur sadipscing elitr ...
      </p>
   </div>
</div>
...
}}}

*Example 3 - Adding a breadcrumb navigation to the content container* ([http://design.humml.eu/toolbox/floatz/samples/LayoutingNavigation/LayoutingNavigation_03.html Live Demo])

The result is, that the breadcrumb floats to the top left corner of the whole page. Other than for the top navigation in the previous example, this is not what we want. The reason is, that the breadcrumb is an absolute positioned navigation element and thus needs a relative positioned container. In our case, the page is a relative positioned container by default but not the content container. To get the breadcrumb flowing within the content container, we make the content container a releative positioned element, by adding `flz_relative` to it. See [BasicConcepts basic concepts] to get more information about relative and absolute positioned elements.

{{{
...
<!-- content -->
<div class="flz_box flz_r80 flz_relative content">
   <ul class="flz_listnav flz_breadcrumb">
      ...
   </div>
</div>
...
}}}

*Example 3b - Making the content container relative positioned* ([http://design.humml.eu/toolbox/floatz/samples/LayoutingNavigation/LayoutingNavigation_03b.html Live Demo])

The result is a little bit better, but now the breadcrumb overlaps the text of the content container. To fix this, we have to add a padding at the top of our content container. We do this directly in the CSS file:

{{{
...
.content {
   background: inherit;
   padding-top: 2em;
}
...
}}}

*Example 3c - Making the content container relative positioned* ([http://design.humml.eu/toolbox/floatz/samples/LayoutingNavigation/LayoutingNavigation_03c.html Live Demo])

Now the breadcrumb works as expected and floats within the content container, above the text.

==Defining a toolbar==
=Layouting menus=
==Defining a horizontal menu=
==Defining a vertical menu=
=Layouting tabboxes=
=Layouting skiplinks=
=Summary=

*Further readings*

The following wiki articles contain further information about how to use floatz for:

   * [LayoutingForms Layouting Forms]
   * [LayoutingContent Layouting Content]