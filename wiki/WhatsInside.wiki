#summary Describes the available download packages and their content
#labels Featured
Last Update: July 20th, 2012

   ----
   Note: this wiki page covers version 1.1.2.
   ----

*Table of content*
<wiki:toc max_depth="2" />

floatz is available in the following download packages.

   * Production package
   * Development kit package
   * Module for Google Web Toolkit

=Production package=

The [http://code.google.com/p/floatz/downloads/list production package] is especially prepared for use in *production* environments. It contains only those files that are really necessary and does not contain any comments, unnecessary whitespaces or line breaks. Because of its reduced readability, this package is *not recommended during development*.

Content of the production package:
|| *Folder* || *Short Description* || *Details* ||
|| floatz-1.1.2 || Root folder || Root folder of the framework for easy [GettingStarted#Step_2_-_Install installation]. Contains one floatz CSS module in shrinked form for each layout mode as well as a copyright note || 
|| floatz-1.1.2/images || Image folder || Contains background-images that are used e.g. for tabbed navigation ||
|| floatz-1.1.2/scripts || Script folder || Contains shrinked version of javascript modules that are only necessary for cross browser skiplink navigation ||

==Modules of production package==

===CSS Modules of production package===

Only one of the listed modules must be imported into your [GettingStarted#Step_3_-_Prepare project CSS file] depending on the desired page layout. The *usage* column shows, what module is mandatory (must be used) or is optional (can be used). The last column shows if the modules have to be used in combination or instead of each other.

|| *Usage* || *Module* || *Description* || ||
|| Mandatory || floatz.center.css || Shrinked and merged version of all floatz modules for center layout || OR ||
|| Mandatory || floatz.fixed.css || Shrinked and merged version of all floatz modules for fixed layout || OR ||
|| Mandatory || floatz.liquid.css || Shrinked and merged version of all floatz modules for liquid layout || ||

===Javascript modules of production package===

The load order column indicates the order in which each file has to be loaded. This sequence is very important, otherwise the scripts will not work properly.

|| *Load Order * || *Usage* || *Module* || *Description* ||
|| 1 || Optional || jquery-1.7.2.js || Shrinked version of javascript DOM manipulation library that is used in floatz.js ||
|| 2 || Optional || floatz.js || Shrinked version of script that is necessary to prepare skiplinks for cross browser compatibility ||

==Loading production modules==

===Loading production CSS modules===

Loading the CSS modules into your project is easy. It's only necessary to load one of the provided CSS modules depending on the layout mode you choose for your project. Use this module within your [GettingStarted#Step_3_-_Prepare project CSS file] to load the entire framework:

{{{ 
   /* Framework specific styles */
   @import url(floatz-1.1.2/floatz.fixed.css)

   /* Project specific styles */
}}}

===Loading production Javascript modules===

To load the javascript modules, you have to add the following code to the head section of your HTML page:

{{{
      <script type="text/javascript" src="styles/floatz-1.1.2/scripts/jquery-1.7.2.min.js"></script>
      <script type="text/javascript" src="styles/floatz-1.1.2/scripts/floatz.js"></script>
      <script type="text/javascript" src="scripts/MyProject.js"></script>
}}}

Then create a project specific script file (e.g. `C:\Projects\MyProject\scripts\MyProject.js`) and add the following lines of code:

{{{
   /**
    * Initializes document
    */
    $(document).ready( function() {
      // Initialize floatz
      floatz.init();
    });
}}}

==Affecting layouts in production mode==

You can affect the kind of page layout that is used, by choosing one of the provided stylesheets depending on the desired layout mode. The following layout modes are supported. Each of them is represented by an according CSS file:

   * Fixed layout (default)
   * Centered layout
   * Liquid / fluid layout

For getting a deep knowledge about how to layout pages with floatz, see [LayoutingPages Layouting Pages]. The following examples are showing what kinds of modules are necessary for each of the supported layout modes.

Load order for fixed layout (default):
{{{ 
   /* Framework specific styles */
   @import url(floatz-1.1.2/floatz.fixed.css)

   /* Project specific styles */
}}}

Load order for liquid layout:
{{{ 
   /* Framework specific styles */
   @import url(floatz-1.1.2/floatz.liquid.css)

   /* Project specific styles */
}}}

Load order for center layout:
{{{ 
   /* Framework specific styles */
   @import url(floatz-1.1.2/floatz.center.css)

   /* Project specific styles */
}}}

=Development kit package=

The [http://code.google.com/p/floatz/downloads/list development kit package] is provided for *development time*. It contains the frameworks CSS and Javascript modules as well as many other helpful utilities. The included CSS and Javascript files contain comments and line breaks that increase readability but also file size. They are *not recommended for use in production environments*.

Content of development kit package:
|| *Folder* || *Short Description* || *Details* ||
|| floatz.dev.kit-1.1.2 || Root folder || Contains a changelog as well as a copyright notice ||
|| floatz.dev.kit-1.1.2/doc || Documentation folder || Contains floatz documentation files ||
|| floatz.dev.kit-1.1.2/samples || Sample folder || Contains different samples that show the use of floatz ||
|| floatz.dev.kit-1.1.2/src || Source folder || Contains all floatz CSS modules ||
|| floatz.dev.kit-1.1.2/src/debug || Debug  folder || Contains special floatz CSS modules that can be used for debugging ||
|| floatz.dev.kit-1.1.2/src/images || Image folder || Contains background-images that are used e.g. for tabbed navigation ||
|| floatz.dev.kit-1.1.2/src/scripts || Script folder || Contains javascript modules that are only necessary for cross browser skiplink navigation ||
|| floatz.dev.kit-1.1.2/templates || Template folder || Contains templates for most common layout scenarios that can be used for project startup or as reference. The [http://code.google.com/p/floatz/source/browse/#svn/trunk/floatz.dev.kit/templates Sourcecode Repository] shows a list of available layout templates ||
|| floatz.dev.kit-1.1.2/tests || Test folder || Contains test pages that are used for module and browser compatibility tests. Can also be used to test your own project CSS and as reference ||
|| floatz.dev.kit-1.1.2/tools || Tools folder || Contains some usefull utilities ||
|| floatz.dev.kit-1.1.2/tools/build || Tools folder || Contains build tool to create CSS files in production folder and to update templates ||
|| floatz.dev.kit-1.1.2/tools/shrink || Tools folder || Contains shrink tool for shrinking and merging CSS files ||

==Modules of development kit package==
===CSS Modules of development kit package===

The *load order* column indicates the order in which each file has to be loaded. This sequence is very important, otherwise the CSS inheritance and thus the framework will not work properly. The *usage* column shows, what module is mandatory (must be used) or is optional (can be used). The last column indicates if the modules have to be used in combination or instead of each other.

|| *Load Order* || *Usage* || *Module* || *Description* || ||
|| 0 || Optional || floatz.css || Loads all floatz modules in the correct order || AND ||
|| 1 || Mandatory || floatz.reset.meyer.css || Basic reset styles to get a common baseline for all browsers || AND ||
|| 2 || Mandatory || floatz.reset.css || Extends basic reset styles for floatz || AND ||
|| 3 || Mandatory || floatz.layout.css || Basic styles for layouting pages, content and web forms || AND ||
|| 4 || Optional || floatz.form.css || Styles for build web forms || AND ||
|| 5 || Optional || floatz.nav.css || Styles for creating navigation elements || AND ||
|| 6 || Optional || floatz.layout.center.css || Extends basic layout styles for centered layout || AND ||
|| 6 || Optional || floatz.layout.liquid.css || Extends basic layout styles for liquid layout || ||

===Javascript modules of development kit package===

Same modules as in production package (see above).

==Loading devlopment kit modules==
===Loading development kit CSS modules===

The easiest way to load the CSS modules into your project is by using the provided floatz.css file, that is added for convenience. It does not contain any CSS styles and is only responsible for loading the CSS modules in the correct order. Use this module within your [GettingStarted#Step_3_-_Prepare project CSS file] to load the entire framework:

{{{ 
   /* Framework specific styles */
   @import url(floatz-1.1.2/floatz.css)

   /* Project specific styles */
}}}

Of course, it is also possible to import the modules directly from your project CSS file:

   ----
   Note: In this case you have to take care that the modules are loaded in the correct order as indicated in the load order column of the module table above.
   ----

{{{ 
   /* Framework specific styles */
   @import url(floatz-1.1.2/floatz.reset.meyer.css);
   @import url(floatz-1.1.2/floatz.reset.css);
   @import url(floatz-1.1.2/floatz.layout.css);
   @import url(floatz-1.1.2/floatz.form.css);
   @import url(floatz-1.1.2/floatz.nav.css);

   /* Project specific styles */
}}}

===Loading development kit Javascript modules===

Same as for loading them in production package (see above).

==Affecting layouts in development mode==

You can affect the kind of page layout that is used, depending on what additional layout module you load. The following layout modes are supported:

   * Fixed layout (default)
   * Centered layout
   * Liquid / fluid layout

For getting a better understanding about how to layout pages with floatz, see [LayoutingPages Layouting Pages]. The following examples are showing what kinds of modules are necessary for each of the supported layout modes.

Load order for fixed layout (default):
{{{
   /* Framework specific styles */
   @import url(floatz-1.1.2/floatz.reset.meyer.css);
   @import url(floatz-1.1.2/floatz.reset.css);
   @import url(floatz-1.1.2/floatz.layout.css);
   @import url(floatz-1.1.2/floatz.form.css);
   @import url(floatz-1.1.2/floatz.nav.css);

   /* Project specific styles */
}}}

Load order for liquid layout:
{{{
   /* Framework specific styles */
   @import url(floatz-1.1.2/floatz.reset.meyer.css);
   @import url(floatz-1.1.2/floatz.reset.css);
   @import url(floatz-1.1.2/floatz.layout.css);
   @import url(floatz-1.1.2/floatz.layout.liquid.css);
   @import url(floatz-1.1.2/floatz.form.css);
   @import url(floatz-1.1.2/floatz.nav.css);

   /* Project specific styles */
}}}

Load order for center layout:
{{{
   /* Framework specific styles */
   @import url(floatz-1.1.2/floatz.reset.meyer.css);
   @import url(floatz-1.1.2/floatz.reset.css);
   @import url(floatz-1.1.2/floatz.layout.css);
   @import url(floatz-1.1.2/floatz.layout.center.css);
   @import url(floatz-1.1.2/floatz.form.css);
   @import url(floatz-1.1.2/floatz.nav.css);

   /* Project specific styles */
}}}

=Module for Google Web Toolkit =

floatz is also available as JAR file for use in Google Web Toolkit based web applications. This section describes how you can integrate it into project. More information about using floatz in GWT can be found under [LayoutingInGoogleWebToolkit Layouting in Google Web Toolkit].

== Adding floatz to the class path ==

Before you start, copy the [http://code.google.com/p/floatz/downloads/list latest version] of the floatz JAR file to the `WEB-INF/lib` folder of your web application and add it to the class path.

== Referencing floatz in your module descriptor ==

Next add a reference to floatz into your module descriptor by adding the following `inherits` tag.

{{{
   ...
  <!-- Other module inherits                                      -->
  <inherits name='com.floatzcss.gwt.Css'/>
   ...
}}}

== Using floatz from code ==

Floatz provides a CSS bundle for each floatz module and all are reachable via the Floatz client bundle. So you have easy access to all styles via their module namespaces. Here is an easy example:

{{{
   package com.floatzcss.demo.client;

   import com.floatzcss.gwt.client.resource.Floatz;
   import com.google.gwt.core.client.EntryPoint;
   import com.google.gwt.user.client.ui.FlowPanel;
   import com.google.gwt.user.client.ui.HTMLPanel;
   import com.google.gwt.user.client.ui.RootPanel;

   public class FloatzTest implements EntryPoint {

      private static final Floatz FLOATZ = Floatz.INSTANCE;

      public void onModuleLoad() {

         // Here we must use the ID directly, because IDs are not supported in GWT´s CSS bundles
         FlowPanel pageContainer = new FlowPanel();
         pageContainer.getElement().setId("flz_page");

         HTMLPanel box = new HTMLPanel("");
         box.setStyleName(FLOATZ.layout().box());

         HTMLPanel spacer = new HTMLPanel("<p>Hello world</p>");
         spacer.setStyleName(FLOATZ.layout().spacer());
         box.add(spacer);

         pageContainer.add(box);
         RootPanel.get().add(pageContainer);
      }
   }
}}}

== Using floatz within UI binders ==

Thanks to the client and CSS bundle mechanism of GWT you have also access to all floatz styles within UI binders. Here is an additional example:

{{{
   <!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
   <ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
      xmlns:g="urn:import:com.google.gwt.user.client.ui">
      <ui:with field="FLOATZ" type="com.floatzcss.gwt.client.resource.Floatz" />
      <ui:style>
      </ui:style>
      <g:HTMLPanel styleName="{FLOATZ.layout.box}">
        <div class="{FLOATZ.layout.spacer}">
            <p>
               Hello World!
            </p>
         </div>
      </g:HTMLPanel>
   </ui:UiBinder> 
}}}

== Affection layouts ==

You can affect the kind of page layout that is used, by choosing one of the provided CSS bundles depending on the desired layout mode. The following layout modes are supported. Each of them is represented by an according CSS bundle:

   * Fixed layout (default)
   * Centered layout
   * Liquid / fluid layout

For getting a deep knowledge about how to layout pages with floatz, see [LayoutingPages Layouting Pages]. The following examples are showing what kinds of modules are necessary for each of the supported layout modes.

   ----
   Note: Inject the layout module directly in the `onLoadModule` method of your web application. 
   ----

{{{ 
      private static final Floatz FLOATZ = Floatz.INSTANCE;

      public void onModuleLoad() {
	 ...	
         FLOATZ.layoutCenter().ensureInjected();
         ...
      }
}}}

Load order for liquid layout:
{{{ 
      private static final Floatz FLOATZ = Floatz.INSTANCE;

      public void onModuleLoad() {
	 ...	
         FLOATZ.layoutLiquid().ensureInjected();
         ...
      }
}}}

Load order for center layout:
{{{ 
      private static final Floatz FLOATZ = Floatz.INSTANCE;

      public void onModuleLoad() {
	 ...	
         FLOATZ.layoutCenter().ensureInjected();
         ...
      }
}}}

*Further readings*

The following wiki articles contain further information about how to use floatz in pratice:

   * [GettingStarted Getting started]
   * [BasicConcepts Basic Concepts]